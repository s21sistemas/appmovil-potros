  const handleSubmit = async () => {
    if (validateForm()) {
      setLoading(true);
      try {
        const auth = getAuth();
        const user = auth.currentUser;
        const uid = user?.uid;
        if (!uid) throw new Error('No se pudo obtener el UID del usuario.');
  
        // Subir archivos (devuelven URLs directas)
        const [fotoJugadorURL, firmaURL] = await Promise.all([
          formData.foto_jugador ? uploadFile(formData.foto_jugador, 'foto_jugador.jpg', 'fotos') : null,
          formData.firma.length > 0 ? (async () => {
            const firmaDataURL = await captureSignature();
            return firmaDataURL ? uploadFile(firmaDataURL, 'firma.png', 'firmas') : null;
          })() : null
        ]);
  
        // Subir documentos (solo URLs)
        const documentosSubidos = {};
        const documentosFields = ['ine_tutor', 'curp_jugador', 'acta_nacimiento', 'comprobante_domicilio'];
        
        await Promise.all(documentosFields.map(async (field) => {
          if (formData.documentos[field]?.uri) {
            documentosSubidos[field] = await uploadFile(
              formData.documentos[field].uri,
              formData.documentos[field].name || `${field}.pdf`,
              'documentos'
            );
          }
        }));
  
        // Crear registro principal
        const datosRegistro = {
          nombre: formData.nombre,
          apellido_p: formData.apellido_p,
          apellido_m: formData.apellido_m,
          sexo: formData.sexo,
          categoria: formData.categoria,
          direccion: formData.direccion,
          telefono: formData.telefono,
          fecha_nacimiento: formData.fecha_nacimiento.toISOString().split('T')[0],
          lugar_nacimiento: formData.lugar_nacimiento,
          curp: formData.curp,
          grado_escolar: formData.grado_escolar,
          nombre_escuela: formData.nombre_escuela,
          alergias: formData.alergias,
          padecimientos: formData.padecimientos,
          peso: formData.peso,
          tipo_inscripcion: formData.tipo_inscripcion,
          foto: fotoJugadorURL,
          rol_id: 'WpOj1dwyls3R7rfgVRZA',
          documentos: {
            ine_tutor: documentosSubidos.ine_tutor || null,
            curp_jugador: documentosSubidos.curp_jugador || null,
            acta_nacimiento: documentosSubidos.acta_nacimiento || null,
            comprobante_domicilio: documentosSubidos.comprobante_domicilio || null,
            firma: firmaURL || null
          },
          activo: 'activo',
          numero_mfl: formData.numero_mfl,
          fecha_registro: new Date(),
          uid: uid,
          ...(formData.tipo_inscripcion === 'transferencia' && {
            transferencia: formData.transferencia
          })
        };
  
        // Guardar en colección principal
        const coleccion = formData.tipo_inscripcion === 'porrista' ? 'porristas' : 'jugadores';
        const docRef = await addDoc(collection(db, coleccion), datosRegistro);
  
        // Obtener costos según el tipo de inscripción (solo el primer documento)
        const costosCollection = formData.tipo_inscripcion === 'porrista' ? 'costos-porrista' : 'costos-jugador';
        const costosQuery = collection(db, costosCollection);
        const costosSnapshot = await getDocs(costosQuery);
        
        if (costosSnapshot.empty) {
          throw new Error(`No se encontraron costos configurados para ${formData.tipo_inscripcion}`);
        }
  
        // Tomamos el primer documento (único documento en la colección)
        const costosDoc = costosSnapshot.docs[0];
        const costosData = costosDoc.data();
  
        // Crear nombre completo para los pagos
        const nombreCompleto = `${formData.nombre} ${formData.apellido_p} ${formData.apellido_m}`;
  
        // Crear registros de pagos según el tipo de inscripción
        if (formData.tipo_inscripcion === 'porrista') {
          await createPagoPorrista(
            docRef.id,
            nombreCompleto,
            costosData.temporadaId,
            costosData
          );
        } else {
          await createPagoJugador(
            docRef.id,
            nombreCompleto,
            costosData.temporadaId,
            formData.categoria,
            costosData
          );
        }
  
        Alert.alert('Éxito', 'Registro completado correctamente');
        navigation.navigate('MainTabs');
      } catch (error) {
        console.error('Error en handleSubmit:', error);
        Alert.alert('Error', error.message || 'Error al completar el registro');
      } finally {
        setLoading(false);
        setCurrentUpload(null);
      }
    }
  };



  ffbe00